// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package cfg

import (
	"fmt"
	"strings"
)

const (
	// Unknown configuration type; this can be used in lieu of an actual config.
	CtypeUNKNOWN Ctype = iota
	// System ENV configuration type; fills from system env or a `.env` file in the root working directory. This configuration type always has priority over other types.
	CtypeSYSENV
	// JSON config; uses Go's in-built JSON marshalling API.
	CtypeJSON Ctype = iota + 14
	CtypeENV  Ctype = iota + 253
	CtypeTOML Ctype = iota + 4092
	CtypeYAML Ctype = iota + 65531
)

var ErrInvalidCtype = fmt.Errorf("not a valid Ctype, try [%s]", strings.Join(_CtypeNames, ", "))

const _CtypeName = "UNKNOWNSYSENVJSONENVTOMLYAML"

var _CtypeNames = []string{
	_CtypeName[0:7],
	_CtypeName[7:13],
	_CtypeName[13:17],
	_CtypeName[17:20],
	_CtypeName[20:24],
	_CtypeName[24:28],
}

// CtypeNames returns a list of possible string values of Ctype.
func CtypeNames() []string {
	tmp := make([]string, len(_CtypeNames))
	copy(tmp, _CtypeNames)
	return tmp
}

// CtypeValues returns a list of the values for Ctype
func CtypeValues() []Ctype {
	return []Ctype{
		CtypeUNKNOWN,
		CtypeSYSENV,
		CtypeJSON,
		CtypeENV,
		CtypeTOML,
		CtypeYAML,
	}
}

var _CtypeMap = map[Ctype]string{
	CtypeUNKNOWN: _CtypeName[0:7],
	CtypeSYSENV:  _CtypeName[7:13],
	CtypeJSON:    _CtypeName[13:17],
	CtypeENV:     _CtypeName[17:20],
	CtypeTOML:    _CtypeName[20:24],
	CtypeYAML:    _CtypeName[24:28],
}

// String implements the Stringer interface.
func (x Ctype) String() string {
	if str, ok := _CtypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Ctype(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Ctype) IsValid() bool {
	_, ok := _CtypeMap[x]
	return ok
}

var _CtypeValue = map[string]Ctype{
	_CtypeName[0:7]:   CtypeUNKNOWN,
	_CtypeName[7:13]:  CtypeSYSENV,
	_CtypeName[13:17]: CtypeJSON,
	_CtypeName[17:20]: CtypeENV,
	_CtypeName[20:24]: CtypeTOML,
	_CtypeName[24:28]: CtypeYAML,
}

// ParseCtype attempts to convert a string to a Ctype.
func ParseCtype(name string) (Ctype, error) {
	if x, ok := _CtypeValue[name]; ok {
		return x, nil
	}
	return Ctype(0), fmt.Errorf("%s is %w", name, ErrInvalidCtype)
}

// MustParseCtype converts a string to a Ctype, and panics if is not valid.
func MustParseCtype(name string) Ctype {
	val, err := ParseCtype(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x Ctype) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Ctype) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCtype(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
